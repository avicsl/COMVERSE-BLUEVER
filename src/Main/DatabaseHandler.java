package Main;

import Class.CartItem;
import Class.CurrentUser;
import Class.Product;
import Class.Student;
import javafx.scene.control.Alert;
import javafx.scene.control.CheckBox;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class DatabaseHandler {
    private static DatabaseHandler handler = null;

    private DatabaseHandler() {}

    public static DatabaseHandler getInstance() {
        if (handler == null) {
            handler = new DatabaseHandler();
        }
        return handler;
    }

    public static Connection getDBConnection() {
        Connection connection = null;
        String dburl = "jdbc:mysql://127.0.0.1:3306/comverse?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Manila";
        String userName = "root";
        String password = "Vhina05solo02_";
        try {
            connection = DriverManager.getConnection(dburl, userName, password);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return connection;
    }

// STUDENT TABLE ----------------------------------------------------------------------------------------------------------------
 
    public List<Student> getAllUsers() {
        List<Student> users = new ArrayList<>();
        String query = "SELECT * FROM users";
 
        try (Connection conn = getDBConnection();
             PreparedStatement pstmt = conn.prepareStatement(query);
             ResultSet rs = pstmt.executeQuery()) {
 
            while (rs.next()) {
                Student user = new Student();
                user.setStudentNumber(rs.getString("student_number"));
                user.setFirstName(rs.getString("first_name"));
                user.setLastName(rs.getString("last_name"));
                user.setEmail(rs.getString("email"));
                user.setPassword(rs.getString("password"));
                user.setCourse(rs.getString("course"));
                user.setDepartment(rs.getString("department"));
 
                users.add(user);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return users;
    }
 
    // Add user (note student_number auto-generated by trigger)
    public boolean addUser(Student user) {
        if (isEmailExists(user.getEmail())) {
            System.err.println("Email already exists!");
            return false;
        }

 
        String query = "INSERT INTO users (email, password, first_name, last_name, department, course) VALUES (?, ?, ?, ?, ?, ?)";
        try (Connection conn = getDBConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, user.getEmail());
            pstmt.setString(2, user.getPassword());
            pstmt.setString(3, user.getFirstName());
            pstmt.setString(4, user.getLastName());
            pstmt.setString(5, user.getDepartment());
            pstmt.setString(6, user.getCourse());
            return pstmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public boolean isEmailExists(String email) {
        String query = "SELECT COUNT(*) FROM users WHERE email = ?";
        try (Connection conn = getDBConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, email);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) return rs.getInt(1) > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
 
    
    public boolean deleteUser(String studentNumber) {
        String sql = "DELETE FROM users WHERE student_number = ?";
 
        try (Connection conn = getDBConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, studentNumber);
            int affectedRows = stmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
 
    public boolean updateUser(Student user) {
        String sql = "UPDATE users SET email = ?, password = ?, first_name = ?, last_name = ?, department = ?, course = ? WHERE student_number = ?";
 
        try (Connection conn = getDBConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
 
            stmt.setString(1, user.getEmail());
            stmt.setString(2, user.getPassword());
            stmt.setString(3, user.getFirstName());
            stmt.setString(4, user.getLastName());
            stmt.setString(5, user.getDepartment());
            stmt.setString(6, user.getCourse());
            stmt.setString(7, user.getStudentNumber());
 
            int affectedRows = stmt.executeUpdate();
            return affectedRows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
 
    // New method: Get user by email
    public Student getUserByEmail(String email) {
        String query = "SELECT * FROM users WHERE email = ?";
        try (Connection conn = getDBConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, email);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                Student user = new Student();
                user.setStudentNumber(rs.getString("student_number"));
                user.setFirstName(rs.getString("first_name"));
                user.setLastName(rs.getString("last_name"));
                user.setEmail(rs.getString("email"));
                user.setPassword(rs.getString("password"));
                user.setCourse(rs.getString("course"));
                user.setDepartment(rs.getString("department"));
                return user;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

// CATEGORY TABLE -----------------------------------------------------------------------------------------------------------------
 
    public List<Category> getAllCategoriesSorted() {
    List<Category> categories = new ArrayList<>();
    String query = "SELECT * FROM category ORDER BY category_id ASC";
 
    try (Connection conn = getDBConnection();
         PreparedStatement pstmt = conn.prepareStatement(query);
         ResultSet rs = pstmt.executeQuery()) {
 
        while (rs.next()) {
            Category category = new Category();
            category.setCategoryId(rs.getString("category_id"));
            category.setCategoryName(rs.getString("category_name"));
            categories.add(category);
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
 
    return categories;
}

// PRODUCT TABLE -------------------------------------------------------------------------------------------------------------------
 
    public boolean addProduct(Product product) {
    String query = "INSERT INTO product (category_id, product_name, image_url, amount, quantity) VALUES (?, ?, ?, ?, ?)";
 
    try (Connection conn = getDBConnection();
         PreparedStatement pstmt = conn.prepareStatement(query)) {
 
        pstmt.setString(1, product.getCategory());
        pstmt.setString(2, product.getProductName());
        pstmt.setString(3, product.getImageUrl());
        pstmt.setDouble(4, product.getAmount());
        pstmt.setInt(5, product.getQuantity());
 
        return pstmt.executeUpdate() > 0;
 
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return false;
}
 
    public List<Product> getAllProducts() {
        List<Product> list = new ArrayList<>();
        String query = "SELECT * FROM product";
    
        try (Connection conn = getDBConnection();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query)) {
    
            while (rs.next()) {
                Product p = new Product();
                p.setProductId(rs.getString("product_id"));
                p.setCategory(rs.getString("category_id"));
                p.setProductName(rs.getString("product_name"));
                p.setImageUrl(rs.getString("image_url"));
                p.setAmount(rs.getDouble("amount"));
                p.setQuantity(rs.getInt("quantity"));  // <-- add this line
                list.add(p);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    public boolean updateProduct(Product product) {
    String sql = "UPDATE product SET category_id = ?, product_name = ?, image_url = ?, amount = ?, quantity = ? WHERE product_id = ?";

    try (Connection conn = getDBConnection();
         PreparedStatement stmt = conn.prepareStatement(sql)) {

        stmt.setString(1, product.getCategory());
        stmt.setString(2, product.getProductName());
        stmt.setString(3, product.getImageUrl());
        stmt.setDouble(4, product.getAmount());
        stmt.setInt(5, product.getQuantity());
        stmt.setString(6, product.getProductId());

        return stmt.executeUpdate() > 0;
    } catch (SQLException e) {
        e.printStackTrace();
        return false;
    }
}

    public boolean deleteProduct(String productId) {
        String sql = "DELETE FROM product WHERE product_id = ?";

        try (Connection conn = getDBConnection();
            PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, productId);
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // PRODUCT - SHIRT ===========================================================================================================
    
    public List<Product> getAllShirtProducts() {
        List<Product> products = new ArrayList<>();
        String query = "SELECT * FROM product WHERE category_id LIKE 'C001%'";

        try (Connection conn = getDBConnection();
            PreparedStatement pstmt = conn.prepareStatement(query);
            ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                Product product = new Product();
                product.setProductId(rs.getString("product_id"));
                product.setProductName(rs.getString("product_name"));
                product.setCategory(rs.getString("category_id"));
                product.setImageUrl(rs.getString("image_url"));
                product.setAmount(rs.getDouble("amount"));
                product.setQuantity(rs.getInt("quantity"));
                products.add(product);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return products;
    }

    // Update product quantity
    public boolean updateProductQuantity(String productId, int quantity) {
        String sql = "UPDATE product SET quantity = ? WHERE product_id = ?";
        try (Connection conn = getDBConnection();
            PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, quantity);
            stmt.setString(2, productId);
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    // PRODUCT - CAP ============================================================================================================
 
    public List<Product> getAllCapProducts() {
    List<Product> products = new ArrayList<>();
    String query = "SELECT * FROM product WHERE category_id LIKE 'C002%'";
 
    try (Connection conn = getDBConnection();
         PreparedStatement pstmt = conn.prepareStatement(query);
         ResultSet rs = pstmt.executeQuery()) {
 
        while (rs.next()) {
            Product product = new Product();
            product.setProductId(rs.getString("product_id"));
            product.setProductName(rs.getString("product_name"));
            product.setCategory(rs.getString("category_id"));
            product.setImageUrl(rs.getString("image_url"));
            product.setAmount(rs.getDouble("amount"));
            product.setQuantity(rs.getInt("quantity"));
            products.add(product);
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return products;
}
 
    public boolean updateCapProductQuantity(String productId, int quantity) {
        String sql = "UPDATE product SET quantity = ? WHERE product_id = ?";
        try (Connection conn = getDBConnection();
                PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setInt(1, quantity);
                stmt.setString(2, productId);
        return stmt.executeUpdate() > 0;
    } catch (SQLException e) {
            e.printStackTrace();
        }
    return false;
}
 
    // PRODUCT - BAG ============================================================================================================
 
    public List<Product> getAllBagProducts() {
    List<Product> products = new ArrayList<>();
    String query = "SELECT * FROM product WHERE category_id LIKE 'C003%'";
 
    try (Connection conn = getDBConnection();
         PreparedStatement pstmt = conn.prepareStatement(query);
         ResultSet rs = pstmt.executeQuery()) {
 
        while (rs.next()) {
            Product product = new Product();
            product.setProductId(rs.getString("product_id"));
            product.setProductName(rs.getString("product_name"));
            product.setCategory(rs.getString("category_id"));
            product.setImageUrl(rs.getString("image_url"));
            product.setAmount(rs.getDouble("amount"));
            product.setQuantity(rs.getInt("quantity"));
            products.add(product);
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return products;
}
 
    public boolean updateBagProductQuantity(String productId, int quantity) {
        String sql = "UPDATE product SET quantity = ? WHERE product_id = ?";
        try (Connection conn = getDBConnection();
                PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setInt(1, quantity);
                stmt.setString(2, productId);
        return stmt.executeUpdate() > 0;
    } catch (SQLException e) {
            e.printStackTrace();
        }
    return false;
}
 
    // PRODUCT - JACKET ============================================================================================================
 
    public List<Product> getAllJacketProducts() {
    List<Product> products = new ArrayList<>();
    String query = "SELECT * FROM product WHERE category_id LIKE 'C004%'";
 
    try (Connection conn = getDBConnection();
         PreparedStatement pstmt = conn.prepareStatement(query);
         ResultSet rs = pstmt.executeQuery()) {
 
        while (rs.next()) {
            Product product = new Product();
            product.setProductId(rs.getString("product_id"));
            product.setProductName(rs.getString("product_name"));
            product.setCategory(rs.getString("category_id"));
            product.setImageUrl(rs.getString("image_url"));
            product.setAmount(rs.getDouble("amount"));
            product.setQuantity(rs.getInt("quantity"));
            products.add(product);
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return products;
}
 
    public boolean updateJacketProductQuantity(String productId, int quantity) {
        String sql = "UPDATE product SET quantity = ? WHERE product_id = ?";
        try (Connection conn = getDBConnection();
                PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setInt(1, quantity);
                stmt.setString(2, productId);
        return stmt.executeUpdate() > 0;
    } catch (SQLException e) {
            e.printStackTrace();
        }
    return false;
}
 
    // PRODUCT - LACE ============================================================================================================
    
    public List<Product> getAllLaceProducts() {
    List<Product> products = new ArrayList<>();
    String query = "SELECT * FROM product WHERE category_id LIKE 'C005%'";
 
    try (Connection conn = getDBConnection();
         PreparedStatement pstmt = conn.prepareStatement(query);
         ResultSet rs = pstmt.executeQuery()) {
 
        while (rs.next()) {
            Product product = new Product();
            product.setProductId(rs.getString("product_id"));
            product.setProductName(rs.getString("product_name"));
            product.setCategory(rs.getString("category_id"));
            product.setImageUrl(rs.getString("image_url"));
            product.setAmount(rs.getDouble("amount"));
            product.setQuantity(rs.getInt("quantity"));
            products.add(product);
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return products;
}
 
    public boolean updateLaceProductQuantity(String productId, int quantity) {
        String sql = "UPDATE product SET quantity = ? WHERE product_id = ?";
        try (Connection conn = getDBConnection();
                PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setInt(1, quantity);
                stmt.setString(2, productId);
        return stmt.executeUpdate() > 0;
    } catch (SQLException e) {
            e.printStackTrace();
        }
    return false;
}

// CART TABLE ---------------------------------------------------------------------------------------------------------------------
    


}


